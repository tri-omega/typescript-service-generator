import java.util.jar.JarFile

/*
 * Copyright (c) 2018 William Frank (info@williamfrank.net)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'org.junit.platform.gradle.plugin'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
version = '0.2'
group = 'io.github.tri-omega'
archivesBaseName = 'typescript-service-generator'

repositories {
    mavenLocal()
    mavenCentral()
}

ext.versions = [
        spring: '5+',
        guava : '28.1-jre',
        junit : '5.0.1',
        lombok: '1+'
]

idea {
    module {
        // Marks the already(!) added srcDir as "generated"
        generatedSourceDirs += file( "${projectDir}/src/test/resources")
    }
}

sourceSets {
    test {
        resources {
            srcDirs = ["${projectDir}/src/test/java", "${projectDir}/src/test/resources"]
            include '**/*'
        }
    }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    compileOnly("org.springframework:spring-webmvc:${versions.spring}")
    compileOnly "org.projectlombok:lombok:${versions.lombok}"

    testCompile "com.google.guava:guava:${versions.guava}"
    testCompile 'com.google.testing.compile:compile-testing:0.10'

    testCompile("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")

    testCompile("org.springframework:spring-webmvc:${versions.spring}")

    testCompile "org.projectlombok:lombok:${versions.lombok}"
    testAnnotationProcessor "org.projectlombok:lombok:${versions.lombok}"
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

ext.uploadUserName = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
ext.uploadPassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: uploadUserName, password: uploadPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: uploadUserName, password: uploadPassword)
            }

            pom.project {
                name 'TypeScript Service Generator'
                packaging 'jar'

                description 'Compile time library to auto-generate TypeScript services for Spring MVC controllers and ' +
                        'interfaces for all the return and parameter types to be used in Angular client side projects'
                url 'https://tri-omega.github.io/typescript-service-generator/'

                scm {
                    connection 'scm:git:git://github.com/tri-omega/typescript-service-generator.git'
                    developerConnection 'scm:git:ssh://github.com:tri-omega/typescript-service-generator.git'
                    url 'https://github.com/tri-omega/typescript-service-generator.git'
                }

                licenses {
                    license {
                        name 'The MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'william.frank'
                        name 'William Frank'
                        email 'info@williamfrank.net'
                    }
                }
            }
        }
    }
}